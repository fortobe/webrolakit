//margins
$mrgxxl: 100px;
$mrgxl: 75px;
$mrgl: 50px;
$mrgmp: 35px;
$mrgm: 30px;
$mrgs: 20px;
$mrgxs: 18px;
$mrgxsm: 15px;
$mrgxxs: 10px;


//fonts
$rem: 18;
$ff_prime: 'Helvetica';
$ff_sec: 'Arial';
$ff_aux: sans-serif;
$fw_norm: 600;
$fw_med: 500;
$fw_thin: 300;
$lh: 1.5;
$lh_alt: 1.25;

$fs_h1: 48;
$fs_h2: 32;
$fs_h4: 28;
$fs_h6: 22;
$fs_xl: 34;
$fs_l: 20;
$fs_m: $rem;
$fs_s: 16;
$fs_xs: 14;
$fs_xxs: 12;

//colours
$white: #fff;
$black: #000;
$red: #F44336;
$dark-red: #B71C1C;
$pink: #E91E63;
$purple: #9C27B0;
$dark-purple: #673AB7;
$indigo: #3F51B5;
$blue: #03A9F4;
$dark-blue: #2196F3;
$cyan: #00BCD4;
$ocean: #009688;
$green: #8BC34A;
$dark-green: #4CAF50;
$light-green: #d0d674;
$yellow: #FFEB3B;
$dark-yellow: #FDD835;
$golden: #FFC107;
$orange: #FF9800;
$dark-orange: #FF5722;
$brown: #795548;
$choco: #40251d;
$grey: #E0E0E0;
$dark-grey: #9E9E9E;
$bright-grey: #607D8B;


//paths
$img: "../img/";
$icons: "../img/icons/";
$logos: "../img/logos/";


//icons
$icon_arrow: url($icons + '/default/icon_arrow.png');
$icon_arrow_white: url($icons + '/default/icon_arrow_white.png');
$icon_cart: url($icons + '/default/icon_cart.png');
$icon_cart_white: url($icons + '/default/icon_cart_white.png');
$icon_check: url($icons + '/default/icon_check.png');
$icon_check_white: url($icons + '/default/icon_check_white.png');
$icon_close: url($icons + '/default/icon_close.png');
$icon_close_white: url($icons + '/default/icon_close_white.png');
$icon_dropdown: url($icons + '/default/icon_dropdown.png');
$icon_dropdown_white: url($icons + '/default/icon_dropdown_white.png');
$icon_location: url($icons + '/default/icon_marker.png');
$icon_location_white: url($icons + '/default/icon_marker_white.png');
$icon_play: url($icons + '/default/icon_play.png');
$icon_play_white: url($icons + '/default/icon_play_white.png');

//cursors


//breakpoints
$bp_fhd: 1920;
$bp_hd: 1600;
$bp_hdr: 1440;
$bp_xl: 1200;
$bp_lg: 992;
$bp_md: 768;
$bp_sm: 576;
$bp_xs: 320;

//functions
@function deunit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

@function px2rem($px, $remunit: $rem) {
  @return ($px / $remunit) + rem;
}

@function rem2px($rems, $remunit: $rem) {
  @return ($rems * $remunit) + px;
}


//mixins
@mixin adaptive($bp: 1200) {
    @media only screen and (max-width: #{$bp - 1}px) {
        @content;
    }
}

@mixin backdrop($zindex: 1, $opacity: .5) {
    position: relative;

    &::after {
        @include stretch;
        background-color: rgba($black, $opacity);
        content: '';
    }
}

@mixin compile_menu($justify: space-between, $align: center) {
    @include destyle_list;
    @include get_flex($justify, $align);
}

@mixin custom_outline($color: $black) {
    &:focus,
    .focus {
        box-shadow: 0 0 0 .2rem rgba($color, .25);
        outline-color: $color !important;
    }
}

@mixin destyle_input {
    appearance: none !important;
    background: none;
    border: none;
    outline: none;
}

@mixin destyle_list {
    list-style: none;
    margin: 0;
    padding: 0;
}

@mixin get_flex($justify: space-between, $align: center) {
    display: flex;
    align-items: $align;
    justify-content: $justify;
    flex-wrap: wrap;
    @if ($justify == stretch) {
        & > * {
            flex: 1 1 auto;
        }
    }
}

@mixin make_grid($cols:4, $direction:row, $valign:stretch, $halign:center) {
    align-items: $valign;
    display: flex;
    flex-wrap: wrap;
    justify-content: $halign;

    @if ($cols > 0) {
        & > * {
            flex-basis: 100% / $cols;
        }
    }
}

@mixin make_rect($width, $height, $absolute, $stretch) {
    display: block;
    width: $width;
    @if $height {
        height: $height;
    } @else {
        height: $width;
    }
    @if $absolute {
        position: absolute;
    }
    @if $stretch {
        left: 0;
        right: 0;
        top: 0;
    }
}

@mixin mobile-first($bp: 320) {
    @media only screen and (min-width: #{$bp}px) {
        @content;
    }
}

@mixin placeholder_styler($color, $font-size) {
    &::-webkit-input-placeholder {
        color: $color;
        font-size: $font-size;
    }
    &::-moz-placeholder {
        color: $color;
        font-size: $font-size;
    }
    &:-ms-input-placeholder {
        color: $color;
        font-size: $font-size;
    }
}

@mixin reset_link_color($color: inherit, $hover: true) {
    &, &:visited, &:active {
        color: $color
    }
    @if ($hover) {
        &:hover {
            color: $color;
        }
    }
}

@mixin stretch($position: absolute) {
    display: block;
    position: $position;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
}

@mixin vert_align {
    top: 50%;
    transform: translateY(-50%);
}


//animations
@keyframes fadein {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

@keyframes fadeout {
    0% {
        opacity: 1;
    }
    100% {
        opacity: 0;
    }
}

@keyframes fillwidth {
    0% {
        width: 0;
    }
    100% {
        width: 100%;
    }
}

@keyframes flipin {
    0% {
        transform: rotateY(90deg);
    }
    100% {
        transform: rotateY(0);
    }
}

@keyframes flipout {
    0% {
        transform: rotateY(0);
    }
    100% {
        transform: rotateY(90deg);
    }
}

@keyframes rotateY {
    0% {
        transform: rotateY(0deg);
    }
    50% {
        transform: rotateY(180deg);
    }
    100% {
        transform: rotateY(360deg);
    }
}

@keyframes rotateX {
    0% {
        transform: rotateX(0deg);
    }
    50% {
        transform: rotateX(180deg);
    }
    100% {
        transform: rotateX(360deg);
    }
}

@keyframes widthIn {
    from {
        width: 0;
    }
    to {
        width: 100%;
    }
}

@keyframes widthOut {
    from {
        left: 0;
        width: 100%;
    }
    to {
        left: 100%;
        width: 0;
    }
}